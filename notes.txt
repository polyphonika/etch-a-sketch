Next Steps, Point 4 in the instructions
-----------------------------------------

Add a button on the top of the screen that will send the user a popup asking for the number of squares per side for the new grid. Once entered, the existing grid should be removed, and a new grid should be generated in the same total space as before (e.g., 960px wide) so that you’ve got a new sketch pad.
Tip: Set the limit for the user input to a maximum of 100. A larger number of squares results in more computer resources being used, potentially causing delays, freezing, or crashing that we want to prevent.
Research button tags in HTML and how you can make a JavaScript function run when one is clicked.
Also check out prompts.
You should be able to enter 64 and have a brand new 64x64 grid pop up without changing the total amount of pixels used.

Defining own steps:
* How to set a variable and then use this to draw the grid?
* How to pick up this variable in CSS when working on calculating grid size?

This is an interesting problem because we're currently doing CSS calculations in a dedicated file and we won't be able to pick up.

So yes, we'll have to set height and width directly in our JS.

Next steps:
* Draw initial grid x
* Add a button at the top x
* Set layout of button, flex is ok but work out where and how, you'll need to set the size x
* Create prompt when button clicked to get grid size
* Add validation on prompt, reprompt if fails
* If passes, delete existing grid OR container
* Make new grid, make new container
* Add height/width to new grid via JS

Future:
* Add Tailwind or Bootstrap
* Change positioning of grid to be central regardless of viewport size
* Do bonus tasks on project page

--------------

Bonus Tasks:
Extra credit
Transform the behavior of a square when interacting with the mouse by introducing a series of modifications.

Rather than squares being the same color throughout the grid, randomize the squares’ RGB values with each interaction.
Additionally, implement a progressive darkening effect where each interaction darkens the square by 10%. The goal is to achieve a fully black (or completely colored) square in only ten interactions.
Hint: The opacity CSS property is useful here. To learn how to use it, check this MDN docs article about the opacity CSS property.

*1 - Let's set the random RBG colour. Work out how RBG colours work then sort randomisation.
So, background-color in the format of rbg(255,255,255) - so rand must be range of that. - DONE

*2 - Progressive darkening, each interaction darkens the square by 10% increments. Use opacity.